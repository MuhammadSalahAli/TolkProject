export class Renderer{constructor(component_factory){this.factory=new component_factory}static renderNegotiation(kwargs={component:null,selector:null}){let component=kwargs["component"];let selector=kwargs["selector"];let element;switch(component["render_mode"]){case"append":return"append";case"replaceOrAppend":if(selector){element=document.querySelector(selector)}else{element=document.querySelector(component["selector"])}if(element){return"replace"}else{return"append"}case"prepend":return"prepend";case"replaceOrPrepend":if(selector){element=document.querySelector(selector)}else{element=document.querySelector(component["selector"])}if(element){return"replace"}else{return"prepend"}default:throw new Error("invalid render mode")}}static renderComponent(kwargs={component:null,render_method:null,refresh:null,container:null,selector:null}){let component=kwargs["component"];let render_method=kwargs["render_method"];let refresh=kwargs["refresh"];let container_selector=kwargs["container"];let element_selector=kwargs["selector"];let element,container;if(!component&&render_method){throw new Error("Expected args not provided")}else{return new Promise(function(resolve,reject){switch(render_method){case"append":if(container_selector){container=document.querySelector(container_selector)}else{container=document.querySelector(component["container"])}if(container){if(refresh){container.innerHTML=""}container.append(component["element"]);resolve(component["element"])}else{throw new Error("append container not found")}break;case"prepend":if(container_selector){container=document.querySelector(container_selector)}else{container=document.querySelector(component["container"])}if(container){if(refresh){container.innerHTML=""}container.prepend(component["element"]);resolve(component["element"])}else{throw new Error("prepend container not found")}break;case"replace":element=document.querySelector(component["selector"]);if(element_selector){element=document.querySelector(element_selector)}else{element=document.querySelector(component["selector"])}if(element){element.replaceWith(component["element"]);resolve(component["element"])}else{throw new Error("replace element not found")}break;default:reject(new Error("don't know how to apply render mode"));break}})}}render(kwargs={component_name:null,data:null,before_render:null,refresh:null,container:null,selector:null}){let component_name=kwargs["component_name"];let before_render=kwargs["before_render"];let data=kwargs["data"];let refresh=kwargs["refresh"];let container=kwargs["container"];let selector=kwargs["selector"];if(!component_name){throw new Error("Expected args not provided")}else{let component=this.factory.create({component_name:component_name,data:data});return new Promise(function(resolve,reject){let render_method=Renderer.renderNegotiation({component:component,selector:selector||null});if(before_render){before_render(component)}Renderer.renderComponent({component:component||null,render_method:render_method||null,refresh:refresh||null,container:container||null,selector:selector||null}).then(function(element){resolve(element,data)},function(error){reject(error)})})}}};export class AbstractComponentFactory{create(kwargs={component_name:null,data:null}){}};